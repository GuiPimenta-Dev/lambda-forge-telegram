{
  "url": "https://docs.lambda-forge.com/home/creating-a-hello-world/",
  "title": "Creating a Hello World - Lambda Forge",
  "content": "\n\n\n\n\n\n\n\n\n\nCreating a Hello World - Lambda Forge\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n          Skip to content\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            Lambda Forge\n          \n\n\n\n            \n              Creating a Hello World\n            \n          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            Initializing search\n          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \n  \n    \n  \n  Home\n\n      \n\n\n\n          \n  \n  Docs\n\n        \n\n\n\n          \n  \n  Example Projects\n\n        \n\n\n\n          \n  \n  Articles\n\n        \n\n\n\n        \n  \n    \n  \n  License\n\n      \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Lambda Forge\n  \n\n\n\n\n    Home\n  \n\n\n\n\n\n\n    Docs\n  \n\n\n\n\n\n            Docs\n          \n\n\n\n\n    Introduction\n  \n\n\n\n\n\n    Getting Started\n  \n\n\n\n\n\n\n    Creating a Hello World\n  \n\n\n\n\n    Creating a Hello World\n  \n\n\n\n\n      Table of contents\n    \n\n\n\n\n      Understanding the Function Structure\n    \n\n\n\n\n\n      Implementing the Hello World Function\n    \n\n\n\n\n\n      Configuring Your Lambda Function Dependencies\n    \n\n\n\n\n\n\n      The Services Class\n    \n\n\n\n\n\n      Utilizing the Services Class in config.py\n    \n\n\n\n\n\n\n\n\n      Deploying Your Lambda Function\n    \n\n\n\n\n\n\n      Push Your Code To Github\n    \n\n\n\n\n\n      Deploying the Stacks\n    \n\n\n\n\n\n\n\n\n\n\n\n    Securing Endpoints\n  \n\n\n\n\n\n    Lambda Layers\n  \n\n\n\n\n\n    Multi-Stage Environments\n  \n\n\n\n\n\n    Custom CodePipeline Steps\n  \n\n\n\n\n\n    Docs Generation\n  \n\n\n\n\n\n    Pre-Commit Hooks\n  \n\n\n\n\n\n\n\n\n\n    Example Projects\n  \n\n\n\n\n\n            Example Projects\n          \n\n\n\n\n    Introduction\n  \n\n\n\n\n\n\n    Begginer\n  \n\n\n\n\n\n            Begginer\n          \n\n\n\n\n    Guess The Number\n  \n\n\n\n\n\n    URL Shortener\n  \n\n\n\n\n\n    Image to QR Code Converter\n  \n\n\n\n\n\n\n\n\n\n    Intermediate\n  \n\n\n\n\n\n            Intermediate\n          \n\n\n\n\n    JWT Authentication\n  \n\n\n\n\n\n    OAuth2 Authentication\n  \n\n\n\n\n\n    Real-Time Chat\n  \n\n\n\n\n\n    Web Scraper\n  \n\n\n\n\n\n\n\n\n\n    Advanced\n  \n\n\n\n\n\n            Advanced\n          \n\n\n\n\n    Data Processing Pipeline\n  \n\n\n\n\n\n    Stock Price Tracker\n  \n\n\n\n\n\n\n\n\n\n\n\n\n    Articles\n  \n\n\n\n\n\n            Articles\n          \n\n\n\n\n    Custom Domain Name\n  \n\n\n\n\n\n    Tests with Lambda Forge\n  \n\n\n\n\n\n    Deploying External Library as Layers\n  \n\n\n\n\n\n    Creating S3 Buckets\n  \n\n\n\n\n\n    Locating the Base URL\n  \n\n\n\n\n\n    JSON Web Tokens\n  \n\n\n\n\n\n\n\n\n    License\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n      Table of contents\n    \n\n\n\n\n      Understanding the Function Structure\n    \n\n\n\n\n\n      Implementing the Hello World Function\n    \n\n\n\n\n\n      Configuring Your Lambda Function Dependencies\n    \n\n\n\n\n\n\n      The Services Class\n    \n\n\n\n\n\n      Utilizing the Services Class in config.py\n    \n\n\n\n\n\n\n\n\n      Deploying Your Lambda Function\n    \n\n\n\n\n\n\n      Push Your Code To Github\n    \n\n\n\n\n\n      Deploying the Stacks\n    \n\n\n\n\n\n\n\n\n\n\n\n\nCreating a Public Hello World Function With API Gateway\nCreating a public \"Hello World\" function is a fantastic way to get started with Lambda Forge. This function will serve as a simple demonstration of Lambda Forge's ability to quickly deploy serverless functions accessible via an HTTP endpoint.\nHere's how you can create your first public Hello World function.\nforge function hello_world --method \"GET\" --description \"A simple hello world\" --public\n\nThis command prompts Lambda Forge to initiate a new Lambda function located in the hello_world directory. The --method parameter defines the HTTP method accessible for this function.. The --description option provides a concise summary of the function\u2019s intent, and the --public flag ensures the function is openly accessible, allowing it to be invoked by anyone who has the URL.\nUnderstanding the Function Structure\nWhen you create a new function with Lambda Forge, it not only simplifies the creation process but also sets up a robust and organized file structure for your function. This structure is designed to support best practices in software development, including separation of concerns, configuration management, and testing. Let's break down the structure of the automatically generated hello_world function:\nfunctions/\n\u2514\u2500\u2500 hello_world/\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 config.py\n    \u251c\u2500\u2500 integration.py\n    \u251c\u2500\u2500 main.py\n    \u2514\u2500\u2500 unit.py\n\n\nfunctions/ This directory is the root folder for all your Lambda functions. Each function has its own subdirectory within this folder.\nhello_world/ The hello_world subdirectory contains all the necessary files for your function to run, be configured, and tested.\n__init__.py This file marks the directory as a Python package, allowing its modules to be imported elsewhere.\nconfig.py Holds the configuration settings for the function. These might include environment variables, resource identifiers, and other parameters critical for the function's operation.\nintegration.py Contains integration tests that simulate the interaction of your function with external services or resources.\nmain.py This is where the core logic of your Lambda function resides. The handler function, which AWS Lambda invokes when the function is executed, is defined here.\nunit.py Contains unit tests for your function. Unit tests focus on testing individual parts of the function's code in isolation, ensuring that each component behaves as expected.\n\nImplementing the Hello World Function\nThe Lambda function's implementation should be in the main.py file. Below is an example showcasing our simple HelloWorld function:\nfunctions/hello_world/main.pyimport json\nfrom dataclasses import dataclass\n\n@dataclass\nclass Input:\n    pass\n\n@dataclass\nclass Output:\n    message: str\n\ndef lambda_handler(event, context):\n\n    return {\n        \"statusCode\": 200,\n        \"body\": json.dumps({\"message\": \"Hello World!\"})\n    }\n\nThe Input and Output data classes are the entrypoint for the documentation creation process. However, since the project was launched with the --no-docs flag, we will temporarily skip the docs generation details.\nMoving forward, we've successfully implemented a straightforward lambda function that outputs a basic JSON response: {\"message\": \"Hello World!\"}.\nConfiguring Your Lambda Function Dependencies\nThe Services Class\nWithin the infra/services/__init__.py file, you'll find the Services class, a comprehensive resource manager designed to streamline the interaction with AWS services. This class acts as a dependency injector, enabling the easy and efficient configuration of AWS resources directly from your config.py files.\ninfra/services/__init__.pyfrom infra.services.api_gateway import APIGateway\nfrom infra.services.aws_lambda import AWSLambda\nfrom infra.services.layers import Layers\n\nclass Services:\n\n    def __init__(self, scope, context) -> None:\n        self.api_gateway = APIGateway(scope, context)\n        self.aws_lambda = AWSLambda(scope, context)\n        self.layers = Layers(scope)\n\nUtilizing the Services Class in config.py\nIn our Lambda Forge projects, the config.py file plays a crucial role in defining and configuring the dependencies required by a Lambda function.\nBy passing an instance of Services to our configuration classes, we can seamlessly create and manage resources such as Lambda functions and API Gateway endpoints.\nfunctions/hello_world/config.pyfrom infra.services import Services\n\nclass HelloWorldConfig:\n    def __init__(self, services: Services) -> None:\n\n        function = services.aws_lambda.create_function(\n            name=\"HelloWorld\",\n            path=\"./functions/hello_world\",\n            description=\"A simple hello world\"\n        )\n\n        services.api_gateway.create_endpoint(\"GET\", \"/hello_world\", function, public=True)\n\nThe Forge CLI has significantly simplified the setup by automatically tailoring the function to meet our specifications. Essentially, the config.py file configures a Lambda Function to be named as HelloWorld accompanied by the description A simple hello world.\nAdditionally, it sets up the function to respond to GET requests at the /hello_world path and designates it as a public endpoint, making it accessible without authentication.\nDeploying Your Lambda Function\nTo deploy your Lambda function, you should integrate the Config class within the infra/stacks/lambda_stack.py file.\nThe Forge CLI streamlines this process by automatically incorporating it for you.\ninfra/stacks/lambda_stack.pyfrom aws_cdk import Stack\nfrom constructs import Construct\nfrom infra.services import Services\nfrom lambda_forge import release\nfrom functions.hello_world.config import HelloWorldConfig\n\n\n@release\nclass LambdaStack(Stack):\n    def __init__(self, scope: Construct, context, **kwargs) -> None:\n\n        super().__init__(scope, f\"{context.name}-Lambda-Stack\", **kwargs)\n\n        self.services = Services(self, context)\n\n        # HelloWorld\n        HelloWorldConfig(self.services)\n\nPush Your Code To Github\nWith all the required settings now in place, we're ready to upload our code to the GitHub repository.\nLambda Forge is designed to support a multi-stage deployment process, automatically creating environments for Production, Staging and Development. These environments correspond to the main, staging, and dev branches, respectively.\nFor the sake of simplicity, we'll focus on deploying only the development branch at this moment, deferring the discussion on setting up a multi-stage environment to a future session.\n# Initialize the Git repository\ngit init\ngit add .\n\n# Commit the changes\ngit commit -m \"Initial commit\"\n\n# Set the remote repository\ngit remote add origin git@github.com:$GITHUB_USER/$GITHUB_REPO.git\n\n# Create, checkout, and push the 'dev' branch\ngit checkout -b dev\ngit push -u origin dev\n\nDeploying the Stacks\nLambda Forge ensures that every resource it creates on AWS follows a naming convention that integrates the deployment stage, the project name, and the resource name. This approach guarantees a consistent and clear identification methodology throughout the project.\nThe project name is defined within the cdk.json file, linking each resource directly to its associated project and stage for easy management and recognition.\ncdk.json    \"region\": \"us-east-2\",\n    \"account\": \"\",\n    \"name\": \"Lambda-Forge-Demo\",\n    \"repo\": {\n      \"owner\": \"$GITHUB-OWNER\",\n      \"name\": \"$GITHUB-REPO\"\n    },\n\nDeploy the Dev Stack by running the following command in your terminal:\ncdk deploy Dev-Lambda-Forge-Demo-Stack\n\nFollowing a successful deployment, a new pipeline will be created with the name Dev-Lambda-Forge-Demo-Pipeline. Access your AWS CodePipeline console to view it.\n\nIn a dedicated session, we'll delve into the specifics of the pipelines generated, including a closer examination of the development pipeline.\nBy default, Lambda Forge does not incorporate any steps for code validation in the dev pipeline. Instead, it seamlessly integrates Github with AWS CodePipeline. This means that once code is pushed to GitHub, it triggers the pipeline, leading to automatic deployment upon the completion of the execution process.\nAfter the pipeline execution concludes, proceed to your AWS Lambda console and locate the Dev-Lambda-Forge-Demo-HelloWorld function.\n\nSelect the function, then navigate to Configurations -> Triggers. Here, you will be presented with a link to your newly deployed Lambda function, ready for use.\n\nFor this tutorial, the Lambda function is accessible via the following URL:\n\nhttps://gxjca0e395.execute-api.us-east-2.amazonaws.com/dev/hello_world\n\nCongratulations! \ud83c\udf89 You've successfully deployed your very first Hello World function using Lambda Forge! \ud83d\ude80\n\n\n\n\n\n\n\n  Back to top\n\n\n\n\n\n\n\n      \u00a9 2024 Guilherme Alves Pimenta\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
}